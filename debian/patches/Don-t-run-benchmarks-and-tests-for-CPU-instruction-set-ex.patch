From: Simon McVittie <smcv@debian.org>
Date: Mon, 8 Jun 2020 12:16:52 +0100
Subject: Don't run benchmarks and tests for CPU instruction set extensions

The production code auto-detects the CPU and only use code paths
that are supported, but these lower-level tests unconditionally use
whatever code paths were successfully compiled, even if the current CPU
doesn't support them (which leads to SIGILL).

Bug: https://gitlab.freedesktop.org/pipewire/pipewire/-/issues/246
Forwarded: no, Debian-specific workaround until solved properly
---
 spa/plugins/audioconvert/benchmark-fmt-ops.c  | 41 ---------------------------
 spa/plugins/audioconvert/benchmark-resample.c | 39 -------------------------
 spa/plugins/audioconvert/test-fmt-ops.c       | 28 ------------------
 3 files changed, 108 deletions(-)

diff --git a/spa/plugins/audioconvert/benchmark-fmt-ops.c b/spa/plugins/audioconvert/benchmark-fmt-ops.c
index 693ae7b..e79bd47 100644
--- a/spa/plugins/audioconvert/benchmark-fmt-ops.c
+++ b/spa/plugins/audioconvert/benchmark-fmt-ops.c
@@ -139,15 +139,6 @@ static void test_f32_s16(void)
 {
 	run_test("test_f32_s16", "c", true, true, conv_f32_to_s16_c);
 	run_test("test_f32d_s16", "c", false, true, conv_f32d_to_s16_c);
-#if defined (HAVE_SSE2)
-	run_test("test_f32d_s16", "sse2", false, true, conv_f32d_to_s16_sse2);
-	run_testc("test_f32d_s16_2", "sse2", false, true, conv_f32d_to_s16_2_sse2, 2);
-#endif
-#if defined (HAVE_AVX2)
-	run_test("test_f32d_s16", "avx2", false, true, conv_f32d_to_s16_avx2);
-	run_testc("test_f32d_s16_2", "avx2", false, true, conv_f32d_to_s16_2_avx2, 2);
-	run_testc("test_f32d_s16_4", "avx2", false, true, conv_f32d_to_s16_4_avx2, 4);
-#endif
 	run_test("test_f32_s16d", "c", true, false, conv_f32_to_s16d_c);
 	run_test("test_f32d_s16d", "c", false, false, conv_f32d_to_s16d_c);
 }
@@ -157,14 +148,6 @@ static void test_s16_f32(void)
 	run_test("test_s16_f32", "c", true, true, conv_s16_to_f32_c);
 	run_test("test_s16d_f32", "c", false, true, conv_s16d_to_f32_c);
 	run_test("test_s16_f32d", "c", true, false, conv_s16_to_f32d_c);
-#if defined (HAVE_SSE2)
-	run_test("test_s16_f32d", "sse2", true, false, conv_s16_to_f32d_sse2);
-	run_testc("test_s16_f32d_2", "sse2", true, false, conv_s16_to_f32d_2_sse2, 2);
-#endif
-#if defined (HAVE_AVX2)
-	run_test("test_s16_f32d", "avx2", true, false, conv_s16_to_f32d_avx2);
-	run_testc("test_s16_f32d_2", "avx2", true, false, conv_s16_to_f32d_2_avx2, 2);
-#endif
 	run_test("test_s16d_f32d", "c", false, false, conv_s16d_to_f32d_c);
 }
 
@@ -172,12 +155,6 @@ static void test_f32_s32(void)
 {
 	run_test("test_f32_s32", "c", true, true, conv_f32_to_s32_c);
 	run_test("test_f32d_s32", "c", false, true, conv_f32d_to_s32_c);
-#if defined (HAVE_SSE2)
-	run_test("test_f32d_s32", "sse2", false, true, conv_f32d_to_s32_sse2);
-#endif
-#if defined (HAVE_AVX2)
-	run_test("test_f32d_s32", "avx2", false, true, conv_f32d_to_s32_avx2);
-#endif
 	run_test("test_f32_s32d", "c", true, false, conv_f32_to_s32d_c);
 	run_test("test_f32d_s32d", "c", false, false, conv_f32d_to_s32d_c);
 }
@@ -186,12 +163,6 @@ static void test_s32_f32(void)
 {
 	run_test("test_s32_f32", "c", true, true, conv_s32_to_f32_c);
 	run_test("test_s32d_f32", "c", false, true, conv_s32d_to_f32_c);
-#if defined (HAVE_SSE2)
-	run_test("test_s32_f32d", "sse2", true, false, conv_s32_to_f32d_sse2);
-#endif
-#if defined (HAVE_AVX2)
-	run_test("test_s32_f32d", "avx2", true, false, conv_s32_to_f32d_avx2);
-#endif
 	run_test("test_s32_f32d", "c", true, false, conv_s32_to_f32d_c);
 	run_test("test_s32d_f32d", "c", false, false, conv_s32d_to_f32d_c);
 }
@@ -209,18 +180,6 @@ static void test_s24_f32(void)
 	run_test("test_s24_f32", "c", true, true, conv_s24_to_f32_c);
 	run_test("test_s24d_f32", "c", false, true, conv_s24d_to_f32_c);
 	run_test("test_s24_f32d", "c", true, false, conv_s24_to_f32d_c);
-#if defined (HAVE_SSE2)
-	run_test("test_s24_f32d", "sse2", true, false, conv_s24_to_f32d_sse2);
-#endif
-#if defined (HAVE_AVX2)
-	run_test("test_s24_f32d", "avx2", true, false, conv_s24_to_f32d_avx2);
-#endif
-#if defined (HAVE_SSSE3)
-	run_test("test_s24_f32d", "ssse3", true, false, conv_s24_to_f32d_ssse3);
-#endif
-#if defined (HAVE_SSE41)
-	run_test("test_s24_f32d", "sse41", true, false, conv_s24_to_f32d_sse41);
-#endif
 	run_test("test_s24d_f32d", "c", false, false, conv_s24d_to_f32d_c);
 }
 
diff --git a/spa/plugins/audioconvert/benchmark-resample.c b/spa/plugins/audioconvert/benchmark-resample.c
index 38eb218..4fb8075 100644
--- a/spa/plugins/audioconvert/benchmark-resample.c
+++ b/spa/plugins/audioconvert/benchmark-resample.c
@@ -138,45 +138,6 @@ int main(int argc, char *argv[])
 		run_test("native", "c", &r);
 		resample_free(&r);
 	}
-#if defined (HAVE_SSE)
-	for (i = 0; i < SPA_N_ELEMENTS(in_rates); i++) {
-		spa_zero(r);
-		r.channels = 2;
-		r.cpu_flags = SPA_CPU_FLAG_SSE;
-		r.i_rate = in_rates[i];
-		r.o_rate = out_rates[i];
-		r.quality = RESAMPLE_DEFAULT_QUALITY;
-		resample_native_init(&r);
-		run_test("native", "sse", &r);
-		resample_free(&r);
-	}
-#endif
-#if defined (HAVE_SSSE3)
-	for (i = 0; i < SPA_N_ELEMENTS(in_rates); i++) {
-		spa_zero(r);
-		r.channels = 2;
-		r.cpu_flags = SPA_CPU_FLAG_SSSE3 | SPA_CPU_FLAG_SLOW_UNALIGNED;
-		r.i_rate = in_rates[i];
-		r.o_rate = out_rates[i];
-		r.quality = RESAMPLE_DEFAULT_QUALITY;
-		resample_native_init(&r);
-		run_test("native", "ssse3", &r);
-		resample_free(&r);
-	}
-#endif
-#if defined (HAVE_AVX) && defined(HAVE_FMA)
-	for (i = 0; i < SPA_N_ELEMENTS(in_rates); i++) {
-		spa_zero(r);
-		r.channels = 2;
-		r.cpu_flags = SPA_CPU_FLAG_AVX | SPA_CPU_FLAG_FMA3;
-		r.i_rate = in_rates[i];
-		r.o_rate = out_rates[i];
-		r.quality = RESAMPLE_DEFAULT_QUALITY;
-		resample_native_init(&r);
-		run_test("native", "avx", &r);
-		resample_free(&r);
-	}
-#endif
 
 	qsort(results, n_results, sizeof(struct stats), compare_func);
 
diff --git a/spa/plugins/audioconvert/test-fmt-ops.c b/spa/plugins/audioconvert/test-fmt-ops.c
index 0cc03a1..2ef3d43 100644
--- a/spa/plugins/audioconvert/test-fmt-ops.c
+++ b/spa/plugins/audioconvert/test-fmt-ops.c
@@ -160,10 +160,6 @@ static void test_f32_s16(void)
 			true, false, conv_f32_to_s16d_c);
 	run_test("test_f32d_s16d", in, sizeof(in[0]), out, sizeof(out[0]), SPA_N_ELEMENTS(out),
 			false, false, conv_f32d_to_s16d_c);
-#if defined(HAVE_SSE2)
-	run_test("test_f32d_s16_sse2", in, sizeof(in[0]), out, sizeof(out[0]), SPA_N_ELEMENTS(out),
-			false, true, conv_f32d_to_s16_sse2);
-#endif
 }
 
 static void test_s16_f32(void)
@@ -179,10 +175,6 @@ static void test_s16_f32(void)
 			true, true, conv_s16_to_f32_c);
 	run_test("test_s16d_f32d", in, sizeof(in[0]), out, sizeof(out[0]), SPA_N_ELEMENTS(out),
 			false, false, conv_s16d_to_f32d_c);
-#if defined(HAVE_SSE2)
-	run_test("test_s16_f32d_sse2", in, sizeof(in[0]), out, sizeof(out[0]), SPA_N_ELEMENTS(out),
-			true, false, conv_s16_to_f32d_sse2);
-#endif
 }
 
 static void test_f32_s32(void)
@@ -199,10 +191,6 @@ static void test_f32_s32(void)
 			true, false, conv_f32_to_s32d_c);
 	run_test("test_f32d_s32d", in, sizeof(in[0]), out, sizeof(out[0]), SPA_N_ELEMENTS(out),
 			false, false, conv_f32d_to_s32d_c);
-#if defined(HAVE_SSE2)
-	run_test("test_f32d_s32_sse2", in, sizeof(in[0]), out, sizeof(out[0]), SPA_N_ELEMENTS(out),
-			false, true, conv_f32d_to_s32_sse2);
-#endif
 }
 
 static void test_s32_f32(void)
@@ -218,10 +206,6 @@ static void test_s32_f32(void)
 			true, true, conv_s32_to_f32_c);
 	run_test("test_s32d_f32d", in, sizeof(in[0]), out, sizeof(out[0]), SPA_N_ELEMENTS(out),
 			false, false, conv_s32d_to_f32d_c);
-#if defined(HAVE_SSE2)
-	run_test("test_s32_f32d_sse2", in, sizeof(in[0]), out, sizeof(out[0]), SPA_N_ELEMENTS(out),
-			true, false, conv_s32_to_f32d_sse2);
-#endif
 }
 
 static void test_f32_s24(void)
@@ -264,18 +248,6 @@ static void test_s24_f32(void)
 			true, true, conv_s24_to_f32_c);
 	run_test("test_s24d_f32d", in, 3, out, sizeof(out[0]), SPA_N_ELEMENTS(out),
 			false, false, conv_s24d_to_f32d_c);
-#if defined(HAVE_SSE2)
-	run_test("test_s24_f32d_sse2", in, 3, out, sizeof(out[0]), SPA_N_ELEMENTS(out),
-			true, false, conv_s24_to_f32d_sse2);
-#endif
-#if defined(HAVE_SSSE3)
-	run_test("test_s24_f32d_ssse3", in, 3, out, sizeof(out[0]), SPA_N_ELEMENTS(out),
-			true, false, conv_s24_to_f32d_ssse3);
-#endif
-#if defined(HAVE_SSE41)
-	run_test("test_s24_f32d_sse41", in, 3, out, sizeof(out[0]), SPA_N_ELEMENTS(out),
-			true, false, conv_s24_to_f32d_sse41);
-#endif
 }
 
 static void test_f32_s24_32(void)
